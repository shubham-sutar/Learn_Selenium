{"name": "Mini Project of idrive360", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00D20ED3+27667]\n\t(No symbol) [0x00CB6BD4]\n\t(No symbol) [0x00BB1AFF]\n\t(No symbol) [0x00BAA17B]\n\t(No symbol) [0x00B9F1A9]\n\t(No symbol) [0x00B9DF93]\n\t(No symbol) [0x00B9DB43]\n\t(No symbol) [0x00B9D92E]\n\t(No symbol) [0x00B9BD79]\n\t(No symbol) [0x00B9C23B]\n\t(No symbol) [0x00BB42D4]\n\t(No symbol) [0x00C2D237]\n\t(No symbol) [0x00C1392C]\n\t(No symbol) [0x00C2CAC7]\n\t(No symbol) [0x00C136C6]\n\t(No symbol) [0x00BE74D1]\n\t(No symbol) [0x00BE804D]\n\tGetHandleVerifier [0x00FD3D43+2857603]\n\tGetHandleVerifier [0x01027EAD+3202029]\n\tGetHandleVerifier [0x00DA46D4+566292]\n\tGetHandleVerifier [0x00DAB8CC+595468]\n\t(No symbol) [0x00CBF9C4]\n\t(No symbol) [0x00CBC6D8]\n\t(No symbol) [0x00CBC877]\n\t(No symbol) [0x00CAE76E]\n\tBaseThreadInitThunk [0x7623FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779B80CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x779B809E+238]", "trace": "@pytest.mark.positive\n    @allure.title(\"Mini Project of idrive360\")\n    @allure.description(\"Conduct testing and Generate Automation testing report\")\n    def test_mini_project():\n        driver = webdriver.Chrome()\n>       driver.get(\"https://https://www.idrive360.com/enterprise/login\")\n\ntest_mini_project.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Python3xAtbLearn\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\Python3xAtbLearn\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B06EFA5A90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779B80CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779B809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=127.0.6533.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D20ED3+27667]\nE       \t(No symbol) [0x00CB6BD4]\nE       \t(No symbol) [0x00BB1AFF]\nE       \t(No symbol) [0x00BAA17B]\nE       \t(No symbol) [0x00B9F1A9]\nE       \t(No symbol) [0x00B9DF93]\nE       \t(No symbol) [0x00B9DB43]\nE       \t(No symbol) [0x00B9D92E]\nE       \t(No symbol) [0x00B9BD79]\nE       \t(No symbol) [0x00B9C23B]\nE       \t(No symbol) [0x00BB42D4]\nE       \t(No symbol) [0x00C2D237]\nE       \t(No symbol) [0x00C1392C]\nE       \t(No symbol) [0x00C2CAC7]\nE       \t(No symbol) [0x00C136C6]\nE       \t(No symbol) [0x00BE74D1]\nE       \t(No symbol) [0x00BE804D]\nE       \tGetHandleVerifier [0x00FD3D43+2857603]\nE       \tGetHandleVerifier [0x01027EAD+3202029]\nE       \tGetHandleVerifier [0x00DA46D4+566292]\nE       \tGetHandleVerifier [0x00DAB8CC+595468]\nE       \t(No symbol) [0x00CBF9C4]\nE       \t(No symbol) [0x00CBC6D8]\nE       \t(No symbol) [0x00CBC877]\nE       \t(No symbol) [0x00CAE76E]\nE       \tBaseThreadInitThunk [0x7623FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779B80CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x779B809E+238]\n\n..\\Python3xAtbLearn\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "Conduct testing and Generate Automation testing report", "attachments": [{"name": "log", "source": "d7f9d254-8426-413b-b4ec-da282fd582a0-attachment.txt", "type": "text/plain"}], "start": 1723879728163, "stop": 1723879768322, "uuid": "b9205c44-291d-4aef-b709-f06355f555ae", "historyId": "feba4cc88fc961f0551907cedde44302", "testCaseId": "feba4cc88fc961f0551907cedde44302", "fullName": "test_mini_project#test_mini_project", "labels": [{"name": "tag", "value": "positive"}, {"name": "suite", "value": "test_mini_project"}, {"name": "host", "value": "DESKTOP-12LQ1FH"}, {"name": "thread", "value": "12764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_mini_project"}]}